namespace SourceGeneratorsKit.ExampleGenerator
{
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.Text;

    [Generator]
    public class MagicGenerator : ISourceGenerator
    {
        private const string AttributeSource = @"// <auto-generated>
// Code generated by Stored Procedures Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable disable

[System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true)]
internal sealed class MagicAttribute: System.Attribute
{
    public MagicAttribute() {}
}
";

        SyntaxReceiver syntaxReceiver = new MethodsWithAttributeReceiver("MagicAttribute");

        /// <inheritdoc/>
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForPostInitialization((pi) => pi.AddSource("MagicAttribute.cs", AttributeSource));
            context.RegisterForSyntaxNotifications(() => syntaxReceiver);
        }

        public void Execute(GeneratorExecutionContext context)
        {
            // Retrieve the populated receiver
            if (!(context.SyntaxContextReceiver is SyntaxReceiver receiver))
            {
                return;
            }

            List<string> magicMethods = new();
            foreach (IMethodSymbol methodSymbol in this.syntaxReceiver.Methods)
            {
                // process your method here.
                magicMethods.Add(methodSymbol.ToDisplayString());
            }

            var sourceCode = $@"
public static class Magic
{{
    public static string GetMagicMethods() => ""{string.Join(",", magicMethods)}"";
}}           
";
            context.AddSource($"magic_extension.cs", SourceText.From(sourceCode, Encoding.UTF8));
        }
    }
}
